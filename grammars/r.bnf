// noinspection BnfSuspiciousTokenForFile
// Copyright (c) 2017, Holger Brandl, Ekaterina Tuzova
/*
 * Copyright 2000-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 */

{
  parserClass="org.jetbrains.r.parsing.RParser"
  parserUtilClass="org.jetbrains.r.parsing.RParserUtil"
  elementTypeFactory("assignment_statement")="org.jetbrains.r.psi.RElementTypeFactory.getElementTypeByName"
  elementTypeFactory("parameter")="org.jetbrains.r.psi.RElementTypeFactory.getElementTypeByName"
  elementTypeFactory("call_expression")="org.jetbrains.r.psi.RElementTypeFactory.getElementTypeByName"
  implements="org.jetbrains.r.psi.api.RPsiElement"
  extends="org.jetbrains.r.psi.RElementImpl"

  elementTypeHolderClass="org.jetbrains.r.parsing.RElementTypes"
  elementTypePrefix="R_"
  elementTypeClass="org.jetbrains.r.psi.RElementType"
  tokenTypeClass="org.jetbrains.r.psi.RElementType"

  psiImplUtilClass="org.jetbrains.r.psi.impl.RPsiImplUtil"

  psiClassPrefix="R"
  psiImplClassSuffix="Impl"
  psiPackage="org.jetbrains.r.psi.api"
  psiImplPackage="org.jetbrains.r.psi.impl"

  tokens=[

  SEMI=";"
  LEFT_ASSIGN_OLD=":="
  LEFT_ASSIGN="<-"
  LEFT_COMPLEX_ASSIGN="<<-"
  EQ="="
  RIGHT_ASSIGN="->"
  RIGHT_COMPLEX_ASSIGN="->>"
  TILDE="~"
  AND="&"
  OR="|"
  NOT="!"
  LE="<="
  GE=">="
  EQEQ="=="
  GT=">"
  LT="<"
  NOTEQ="!="
  COMMA=","
  TICK="`"
  UNDERSCORE="_"
  TRIPLECOLON=":::"
  DOUBLECOLON="::"
  AT="@"
  ANDAND="&&"
  OROR="||"
  MINUS="-"
  PLUS="+"
  MULT="*"
  DIV="/"
  EXP="^"
  FORWARD_PIPE="|>"
  LIST_SUBSET="$"
  COLON=":"
  LPAR="("
  RPAR=")"
  LBRACE="{"
  RBRACE="}"
  RDBRACKET="]]"
  LDBRACKET="[["
  RBRACKET="]"
  LBRACKET="["
  INVALID_STRING="invalid string"
  ]

  extends(".*statement|.*expression|.*literal")=expression
  extends(".*_operator")=operator
  implements("identifier_expression")="com.intellij.psi.PsiNamedElement"
  implements("string_literal_expression")="com.intellij.psi.PsiNamedElement"
  implements("infix_operator")="com.intellij.psi.PsiNamedElement"
  implements("parameter")="com.intellij.psi.PsiNameIdentifierOwner"
  implements("assignment_statement")="com.intellij.psi.PsiNameIdentifierOwner"
  implements("named_argument")="com.intellij.psi.PsiNameIdentifierOwner"
  implements("parameter")="org.jetbrains.r.psi.api.RPsiElement"
  mixin("string_literal_expression")="org.jetbrains.r.psi.RStringInjectHost"
  mixin("function_expression")="org.jetbrains.r.psi.impl.RControlFlowHolderImpl"
  implements("while_statement")="org.jetbrains.r.psi.api.RLoopStatement"
  implements("for_statement")="org.jetbrains.r.psi.api.RLoopStatement"
  implements("repeat_statement")="org.jetbrains.r.psi.api.RLoopStatement"
  implements("function_expression")="org.jetbrains.r.psi.api.RControlFlowHolder"
  implements("function_expression")="org.jetbrains.r.psi.api.RExpression"
  implements("named_argument")="org.jetbrains.r.psi.api.RExpression"
  implements("argument_list|subscription_expression")="org.jetbrains.r.psi.api.RArgumentHolder"
  implements("assignment_statement")="org.jetbrains.r.classes.s4.extra.RS4GenericOrMethodHolder"
  implements("call_expression")="org.jetbrains.r.classes.s4.extra.RS4GenericOrMethodHolder"

  generateTokenAccessors=false
}

root ::= expression_list
private expression_list ::= ';'* statement_expression* expression?

private statement_expression ::= expression semicolon ';'*


private constant ::=  string_literal_expression | numeric_literal_expression |
                      boolean_literal  | na_literal | null_literal | boundary_literal | invalid_literal

numeric_literal_expression ::= INTEGER | NUMERIC | COMPLEX
string_literal_expression ::= STRING { methods = [getName setName] }
invalid_literal ::= INVALID_STRING

boolean_literal ::= TRUE | FALSE { methods = [isTrue isFalse]}

null_literal ::= NULL
na_literal ::= NA | NA_integer_ | NA_real_ | NA_complex_ | NA_character_
boundary_literal ::= Inf | NaN
private function_literal ::= function | shorthand_function

expression ::=
    if_statement | while_statement | for_statement | repeat_statement | break_statement | next_statement |
    block_expression | help_expression | parenthesized_expression |
    function_expression | left_assign_expression | eq_assign_expression | right_assign_expression |
    unary_tilde_expression | tilde_expression | or_expression | and_expression | unary_not_expression | compare_expression | plusminus_expression |
    muldiv_expression | infix_expression | forward_pipe_expression| colon_expression | unary_plusminus_expression | exp_expression | subscription_expression |
    call_impl_expression | member_expression | at_expression | namespace_access_expression | primitive_expression { methods= [ getReference ] }

//operators
fake assignment_statement ::= {
  methods=[isLeft isRight isEqual getAssignedValue getAssignee getName setName getNameIdentifier isFunctionDeclaration isPrimitiveFunctionDeclaration getFunctionParameters getParameterNameList isClosureAssignment]
  extends="org.jetbrains.r.psi.impl.RAssignmentBase"
  stubClass="org.jetbrains.r.psi.stubs.RAssignmentStub"
  implements="org.jetbrains.r.psi.api.RExpression"
}

// Direct usage produce "employs left-recursion unsupported by generator" warning
fake call_expression ::= {
  methods=[ getArgumentList getExpression getAssociatedS4ClassInfo ]
  extends="org.jetbrains.r.psi.impl.RCallExpressionBase"
  stubClass="org.jetbrains.r.classes.s4.extra.stubs.RCallExpressionStub"
  implements="org.jetbrains.r.psi.api.RExpression"
}

fake operator ::= { methods=[getName getReference] }
fake assign_operator ::= { extends=operator }

left_assign_operator ::= '<-' | '<<-' | ':=' { elementType=assign_operator }
right_assign_operator ::= '->' | '->>' { elementType=assign_operator }
eq_assign_operator ::= '=' { elementType=assign_operator }
or_operator ::= '|' | '||'
tilde_operator ::= '~'
and_operator ::= '&' | '&&'
compare_operator ::= '>' | '>=' | '<' | '<=' | '==' | '!='
plusminus_operator ::= '+' | '-'
muldiv_operator ::= '*' | '/'
colon_operator ::= ':' // used for sequences and interactions
exp_operator ::= '^'
infix_operator ::= INFIX_OP { methods = [getName setName] }
forward_pipe_operator ::= '|>'
not_operator ::= '!'
at_operator ::= '@'
list_subset_operator ::= '$'


// assignment expressions
left_assign_expression ::= expression !<<isNewLine>> left_assign_operator expression { rightAssociative=true; elementType=assignment_statement }
eq_assign_expression ::= expression !<<isNewLine>> eq_assign_operator expression { rightAssociative=true; elementType=assignment_statement }
right_assign_expression ::= expression !<<isNewLine>> right_assign_operator expression { elementType=assignment_statement }
tilde_expression ::= expression !<<isNewLine>> tilde_operator expression

fake operator_expression ::= { methods=[ getOperator isBinary getLeftExpr getRightExpr getExpr] }

// binary operator expressions
or_expression ::= expression !<<isNewLine>> or_operator expression { elementType=operator_expression }
and_expression ::= expression !<<isNewLine>> and_operator expression { elementType=operator_expression }
compare_expression ::= expression !<<isNewLine>> compare_operator expression { elementType=operator_expression }
plusminus_expression ::= expression !<<isNewLine>> plusminus_operator expression { elementType=operator_expression }
muldiv_expression ::= expression !<<isNewLine>> muldiv_operator expression { elementType=operator_expression }
exp_expression ::= expression !<<isNewLine>> exp_operator expression { elementType=operator_expression }
colon_expression ::= expression !<<isNewLine>> colon_operator expression { elementType=operator_expression }
infix_expression ::= expression !<<isNewLine>> infix_operator expression { elementType=operator_expression }
forward_pipe_expression ::= expression !<<isNewLine>> forward_pipe_operator expression { elementType=operator_expression }

// unary operator expressions
unary_not_expression ::= not_operator expression { extends=operator_expression }
unary_plusminus_expression ::= plusminus_operator expression { extends=operator_expression }
unary_tilde_expression ::= tilde_operator expression { extends=operator_expression }


private member_tag ::= primitive_expression | namespace_access_expression | parenthesized_expression
member_expression ::= expression !<<isNewLine>> list_subset_operator member_tag { methods = [ getTag ] extends=operator_expression }

// R grammar allows only symbol or string after @ operator. We check the correctness in the annotator.
at_expression ::= expression !<<isNewLine>> at_operator expression { extends=operator_expression }

namespace_access_expression ::= identifier !<<isNewLine>> ('::' | ':::') identifier_expression {
  methods = [ Namespace="identifier" Identifier="identifier_expression" getNamespaceName]
}

private if_with_else ::= expression else expression { pin=2 }

//statements
if_statement ::= if '(' &<<incBrackets>> expression ')' &<<decBrackets>> (if_with_else | expression ) { pin=1
  methods=[ condition = "expression[0]" ifBody="expression[1]" elseBody="expression[2]" ]
}
while_statement ::= while '(' &<<incBrackets>> expression ')' &<<decBrackets>> expression { pin=1
  methods = [ condition = "expression[0]" body = "expression[1]"]
}
for_statement ::= for '(' &<<incBrackets>> identifier_expression 'in' expression ')' &<<decBrackets>> expression { pin=1
  methods=[ getTarget range = "expression[1]" body = "expression[2]"]
}
repeat_statement ::= repeat expression { pin=1 methods = [ body = "expression" ] }
break_statement ::= break { methods = [ getLoop ] }
next_statement ::= next { methods = [ getLoop] }
block_expression ::= '{' &<<resetBrackets>> expression_list? '}' &<<decBrackets>> { pin=1 }

private keyword ::= NA_integer_ | NA_real_ | NA_complex_ | NA_character_
  TRIPLE_DOTS | if | else | repeat | while |
  function | for | in | next | break

help_expression ::= help ( help)? (keyword | expression) //todo: check that here is expr

//other expressions
identifier_expression ::= identifier {
  methods = [ getReference getName setName ]
}
private primitive_expression ::= constant | identifier_expression
parenthesized_expression ::= '(' &<<incBrackets>> expression ')' &<<decBrackets>>

named_argument ::= (identifier_expression | string_literal_expression) eq_assign_operator (expression | external_empty_expression) {
  methods = [ getName setName getNameIdentifier getAssignedValue getReference ]
}
fake empty_expression ::= expression //todo: required to generate PSI, how to simplify this?
external external_empty_expression ::= parseEmptyExpression { elementType=empty_expression }
private subscription_expr_elem ::= named_argument | expression | external_empty_expression
private subscription_expr_list ::= subscription_expr_elem (',' subscription_expr_elem )*
subscription_expression ::= expression !<<isNewLine>> ('[' ']' | '[' &<<incBrackets>> subscription_expr_list ']' &<<decBrackets>> |
  '[[' ']]' | '[[' &<<incBrackets>> subscription_expr_list ']]' &<<decBrackets>>) {
  methods = [ isSingle ]
}

// This expression is needed to better error handling and better completion
no_comma_tail ::= (named_argument | expression)+

private non_empty_arg ::= (named_argument | expression ) (no_comma_tail?)
private arg ::= non_empty_arg | external_empty_expression
private args_tail ::= (',' arg )* { pin(".*")=1 }
private non_empty_first_arg ::= non_empty_arg args_tail { pin=1 }
private empty_first_arg ::= external_empty_expression ',' arg args_tail { pin=2 }
argument_list ::= '(' &<<incBrackets>> ( non_empty_first_arg | empty_first_arg )? ')' &<<decBrackets>> { pin(".*")=1 }
call_impl_expression ::= expression !<<isNewLine>> argument_list { elementType=call_expression }

parameter ::= identifier_expression ('=' expression)? {
  methods = [ getName setName getNameIdentifier getVariable getDefaultValue]
  extends = "org.jetbrains.r.psi.impl.RParameterBase"
  stubClass = "org.jetbrains.r.psi.stubs.RParameterStub"
}
parameter_list ::= '(' &<<incBrackets>> (parameter (',' parameter )*)? ')' &<<decBrackets>> { pin(".*")=1 }

function_expression ::= function_literal parameter_list expression {
  pin=1
  methods = [ getDocStringValue getControlFlow getReference ]
}

private semicolon ::= &';' | &<<isNewLine>>

//todo: directives?
//todo: user-defined operations as primitive expr, in old parser it was OPERATOR_EXPRESSION, do we really need them?
//todo: what is underscore, was in lexer earlier?
